#1 테이블 만들기와 삭제
db.drop_all()
db.create_all()

#2 행 추가
admin_role=Role(rolename='Admin')
mod_role=Role(rolename='Modertor')
user_role=Role(rolename='User')
user_john=User(loginname='john', role=admin_role)
user_susan=User(loginname='susan', role=user_role)
user_david=User(loginname='david', role=user_role)

#db확인
print(admin_role.id)
print(mod_role.id)
print(user_role.id)

#database에 변화는 데이터베이스 session에 의해 관리된다.
#step 1.
db.session.add(admin_role)
db.session.add(mod_role)
db.session.add(user_role)
db.session.add(user_john)
db.session.add(user_susan)
db.session.add(user_david)
#or 한번에
db.session.add_all([admin_role, mod_role, user_role, user_john, user_susan, user_david])

#step2
db.session.commit() 완료명령 

#db확인
print(admin_role.id)
print(mod_role.id)
print(user_role.id)

#각 Model 클래스마다 query 객체를 사용할 수 있다.
Role.query.all()
User.query.all()

#query 객체에서 filter 사용
User.query.filter_by(role=user_role).all()

#native SQL 질의를 확인하는 법
str(User.query.filter_by(role=user_role))

#새로운 shell session에서 시작하는 방법
#shell 세션을 다시 시작하면 이전에 생성된 객체들은 모드 사라진다.
#하지만, 데이터베이스에 있는 것들은 데이터베이스 테이블에 계속 존재한다.
#
exit()
flask shell
print(admin_role.id)
print(mod_role.id)
print(user_role.id)

#step1
#데이터베이스 행에서 파이썬 객체를 생성하는 방법
user_role=Role.query.filter_by(rolename='User').first()
#위 경우 query가 all() 대신에 first메서드로 실행되었다.
#all()은 질의 모든 결과들을 list로 리턴한다
#first는 첫번째 결과 혹은 결과가 없으면 None을 리턴한다.
user_role

#
#4.행 수정
#
#db에서 읽어서 수정하는 것은?
#query = db.session.query(User).filter(User.id==1)
#user=query.one()
#query=User.query.filter(User.id==2)
#user=query.one()

#step1. db에서 읽기
query=Role.query.filter_by(rolename='Admin')
#or
#query=Role.query.filter(Role.rolename='Admin')
admin_role=query.first()
#확인
admin_role
admin_role.id
admin_role.rolename

#step2. 행 수정하기
admin_role.rolename="Administrator"
db.session.commit()

#
#5.행 삭제
#

#step1. db에서 읽기
query=Role.query.filter_by(rolename='Modertor')
mod_role=query.first()
#확인
mod_role
mod_role.id
mod_role.rolename

#step2 행 삭제하기
db.session.delete(mod_role)
db.session.commit()
